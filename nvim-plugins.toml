[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
    set background=dark
    augroup MyColorScheme
        au!
        au VimEnter * nested colorscheme lucius
    augroup END
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'LucHermitte/lh-vim-lib'

[[plugins]]
repo = 'LucHermitte/alternate-lite'
depends = ['lh-vim-lib']

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo='vim-denops/denops.vim'

[[plugins]]
repo='neovim/nvim-lspconfig'

[[plugins]]
repo='williamboman/nvim-lsp-installer'
hook_source='''
lua <<EOF
local lsp_installer = require("nvim-lsp-installer")

-- Register a handler that will be called for all installed servers.
-- Alternatively, you may also register handlers on specific server instances instead (see example below).
lsp_installer.on_server_ready(function(server)
    local opts = {}

    -- (optional) Customize the options passed to the server
    -- if server.name == "tsserver" then
    --     opts.root_dir = function() ... end
    -- end

    opts.diagnostics = {enable = false}

    if server.name == "jedi_language_server" then
        opts.diagnostics = {enable = false}
        opts.completion = {ignorePatterns = {"^_{1,3}$|^_[^_].*$|^__.*(?<!__)$"} }
    end

    -- This setup() function is exactly the same as lspconfig's setup function.
    -- Refer to https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
    server:setup(opts)
end)
EOF
'''

[[plugins]]
repo='Shougo/denite.nvim'
hook_source='''
    augroup denite_settings_aug
        autocmd!
        autocmd FileType denite call s:denite_my_settings()
    augroup END
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction

    augroup denite_filter_settings_aug
        autocmd!
        autocmd FileType denite-filter call s:denite_filter_my_settings()
    augroup END
    function! s:denite_filter_my_settings() abort
        imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
    endfunction

    " file/rec backend command
    if executable("rg")
        call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git', '--color', 'never'])
    endif

    " matchers
    call denite#custom#source('file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
    call denite#custom#source('file/rec', 'matchers', ['matcher/cpsm'])

    " ripgrep on grep source
    if executable("rg")
        call denite#custom#var('grep', {
                \ 'command': ['rg'],
                \ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
                \ 'recursive_opts': [],
                \ 'pattern_opt': ['--regexp'],
                \ 'separator': ['--'],
                \ 'final_opts': [],
                \ })
    endif

    " file/rec/git source
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
            \ ['git', 'ls-files', '-co', '--exclude-standard'])

    " keybindings
    nnoremap [denite] <Nop>
    nmap <Leader>u [denite]
    nnoremap <silent> [denite]f     <Cmd>Denite file/rec<CR>
'''

